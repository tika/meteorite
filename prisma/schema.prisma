// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  username String @unique @db.VarChar(255)
  email    String @unique @db.VarChar(255)
  password String @db.VarChar(255)

  // Followers
  followers  User[] @relation("UserFriendsUser", references: [id])
  followerOf User[] @relation("UserFriendsUser", references: [id])

  // Blocked
  blocked   User[] @relation("UserBlocksUser", references: [id])
  blockedBy User[] @relation("UserBlocksUser", references: [id])

  // Posts
  posts      Post[] @relation("UserAuthorsPost")
  likedPosts Post[] @relation("UserLikesPost")

  // Comments
  comments      Comment[] @relation("UserAuthorsComment")
  likedComments Comment[] @relation("UserLikesComment")

  // Sent notifications
  sentNotifications Notification[] @relation("UserAuthorsNotification")
  notifications     Notification[] @relation("UserNotified")

  savedPosts Post[]    @relation("UserSavesPost")
  Profile    Profile[]
}

model Profile {
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  avatar   String
  bio      String
  location String
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  caption String?  @db.VarChar(2000)
  images  String[]

  author   User   @relation("UserAuthorsPost", fields: [authorId], references: [id])
  authorId String

  likedBy User[] @relation("UserLikesPost", references: [id])
  savedBy User[] @relation("UserSavesPost", references: [id])

  comments Comment[] @relation("PostHasComment")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content String @db.VarChar(256)

  post   Post   @relation("PostHasComment", fields: [postId], references: [id])
  postId String

  author   User   @relation("UserAuthorsComment", fields: [authorId], references: [id])
  authorId String

  parentCommentId String?
  parentComment   Comment?  @relation("CommentHasParent", references: [id], fields: [parentCommentId])
  childComments   Comment[] @relation("CommentHasParent")

  likedBy User[] @relation("UserLikesComment", references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  contentId   String
  contentType String
  action      String

  notifiedUser   User   @relation("UserNotified", fields: [notifiedUserId], references: [id])
  notifiedUserId String

  author   User   @relation("UserAuthorsNotification", fields: [authorId], references: [id])
  authorId String
}
